%%
%term EOF 
	| ID of string
	| INT of int | STRING of string 
	| COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
	| LBRACE | RBRACE | DOT 
	| PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
	| AND | OR | ASSIGN
	| ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
	| BREAK | NIL
	| FUNCTION | VAR | TYPE
	| UMINUS

%nonterm exp | program
	| decs | dec | tydec | vardec | fundec
	| ty | tyfields | commatyfields
	| lvalue
	| expseq
	| expfields | commaexpfields
	| binaryexp
	| recfields | commarecfields


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%nonassoc WHILE FOR TO IN FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program
	: exp ()

decs
	:          ()
	| decs dec ()

dec
	: tydec  ()
	| vardec ()
	| fundec ()

tydec
	: TYPE ID EQ ty ()

ty
	: ID                     ()
	| LBRACE tyfields RBRACE ()
	| ARRAY OF ID            ()

tyfields
	:                           ()
	| ID COLON ID commatyfields ()

commatyfields
	:                                 ()
	| commatyfields COMMA ID COLON ID ()

vardec
	: VAR ID ASSIGN exp          ()
	| VAR ID COLON ID ASSIGN exp ()

fundec
	: FUNCTION ID LPAREN tyfields RPAREN EQ exp          ()
	| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()

lvalue
	: ID                       ()
	| lvalue DOT ID            ()
	| lvalue LBRACK exp RBRACK ()
	
exp
	: lvalue                          ()
	| NIL                             ()
	| LPAREN expseq RPAREN            ()
	| INT                             ()
	| STRING                          ()
	| MINUS exp %prec UMINUS          ()
	| ID LPAREN expfields RPAREN      ()
	| binaryexp                       ()
	| ID LBRACE recfields RBRACE      ()
	| ID LBRACK exp RBRACK OF exp     ()
	| lvalue ASSIGN exp               ()
	| IF exp THEN exp ELSE exp        ()
	| IF exp THEN exp                 ()
	| WHILE exp DO exp                ()
	| FOR ID ASSIGN exp TO exp DO exp ()
	| BREAK                           ()
	| LET decs IN expseq END          ()

expseq
	: exp                  ()
	| expseq SEMICOLON exp ()

expfields
	:                    ()
	| exp commaexpfields ()

commaexpfields
	:                          ()
	| commaexpfields COMMA exp ()

binaryexp
	: exp PLUS exp   ()
	| exp MINUS exp  ()
	| exp TIMES exp  ()
	| exp DIVIDE exp ()
	| exp EQ exp     ()
	| exp NEQ exp    ()
	| exp GT exp     ()
	| exp LT exp     ()
	| exp GE exp     ()
	| exp LE exp     ()
	| exp AND exp    ()
	| exp OR exp     ()

recfields
	:                          ()
	| ID EQ exp commarecfields ()

commarecfields
	:                                ()
	| commarecfields COMMA ID EQ exp ()
